Java 
core java - super, this, final keywords, generics, recursion, collections(tree, graph,dequeue and queue), Optional (streams, lambda, functional interface),exception handling, Date timeAPI,

  Comparable vs Comparator.. memory management & garbage collection,
file handling, multithreading & concurrency

codekata -> walkthrough --> done

javascript -> 1/2hr only taken, but not clear.. bootstrap.. html and css (margin, padding)

Git -> clear basics -> adding into repository, git init, git add, git commit, git push, stash,.. 

git to be covered : fetch, merge, rebase, status, pull, git branching

sql -> from constraints, jdbc connectivity


*************************
18/04/24.
matrix problem
reading i/p from user
codekata

Problem solving skills -> 

divide and conquer..

IDE -> eclipse, sts (spring tool suite) -> almost similar
IntelliJ -> advanced features.. two types 1. community edition (free and open source), 2. ultimate edition (paid, free tier for first 15-30days)

jdk -> open jdk : oracle/amazon

jdk version should be compatible with IDE..

version 1 -> your game app..
playstore/app store -> version 2.. 

22/04/24

New Project -> select language, select build tool -> maven, gradle

packages -> classes -> methods/functions -> objects or variables (local & global)

.jar(.exe) -> build tools..

core java - super, this, final keywords: 

this : refers to current object 
super : refers to superclass or parent methods or variables
final : can't modify a value (variable), in case of class -> can't extend., method level -> can't overrride method

immutable -> can't modify 
	. make your class as final
	. make your fields as private
	. you will not have setters only getters
	. mutable fields final
	. initialize using a constructor

generics -> ensure type safety
	generic class(List), type parameters : T -> type, E -> element, K -> key, N -> number, V -> value
	generic method
	type casting -> from one data type you are converting to datatype

recursion -> making a function to call itself

collections -> framework (store data & manipulate data) -> search, sort, insertion, manipulation, deletion etc

				Iterable(interface)
				    ..

				  Collection

		List        Queue        Set     Map  


List -> insertion order, any number of null values
	ArrayList :  non-synchrnoized : add, remove, contains, get
	LinkedList :  non-synchrnoized : add, remove, contains, get
	Vector : synchronized : add, remove, contains, get
		. stack : push(add), insertion order Last In first Out : pop(remove), peek(top element), get

synchronous -> one action happens only at one time.. Collections.synchronizedList()

Queue : First in First Out : poll, remove, contains, peek, element
	. Priority queue - no insertion order
	. array dequeue - insertion order

Dequeue : add/delete the elements either at last or first position	

23/04/24

Set -> doesn't allow duplicates
	hashSet: not following insertion order, add, remove, contains., no indexing concept so get.., one null will be allowed
	linkedhashset : follows insertion order, one null can be allowed
	treeSet : ascending order, no null values allowed, in case of null values -> run time exception

Map : store data in form of keys and values.. Keys will be unique, values can be duplicated


	Map<Integer, String> hashMap = new HashMap<>();
	hashMap.get(key) -> values
	hashMap.remove(1); -> remove both key and value
	hashMap.keySet() -> give you all the keys
	hashMap.containsKey(1) -> to check keys
	hashMap.containsValue("jill") -> to check values
	hashMap.entrySet() -> keys and values

		hashMap : One null key and multiple null values.
		treemap -> doesn't allow null key

hashtable, linked hash map.

stream API -> to process any collection of data	

Optional -> filter, map, entryset.stream

terenary operator -> condition ? true (statement will be executed) : false (whatever written here will be executed) --> if-else

Functional Interface -> @FunctionalInterface,

single abstract method, default or static or private methods in this..

abstract method in an interface should be overridden by the implemented class..

Exception Handling:  (try, catch, finally, throw, throws)

	custom exception : extends exception, call parent constructor

DateTime API : changes in Java 8 -> Zoned, LocalDateTime, ChronoUnits, LocalDate, LocalTime, Period, Duration	